{
	"name": "DF_FACT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "sourcESTG"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable4",
						"type": "DatasetReference"
					},
					"name": "sourceLocation"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable3",
						"type": "DatasetReference"
					},
					"name": "sourceBreed"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTabledd",
						"type": "DatasetReference"
					},
					"name": "sourceDATEdim"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableFACT",
						"type": "DatasetReference"
					},
					"name": "sourceFACT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableFACT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinLocationDim"
				},
				{
					"name": "joinBreeedDim"
				},
				{
					"name": "joinDatedim"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          D1_LOB_ID as string,",
				"          D1_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcESTG",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocation",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreed",
				"source(output(",
				"          DT as date,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as date,",
				"          END_DAY_OF_MONTH as date,",
				"          QUARTER_NUM as decimal(2,0),",
				"          DAY_OF_WEEK as decimal(2,0),",
				"          IS_WEEKEND as decimal(1,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          MONTH_NUM as decimal(2,0),",
				"          DAY_NUM as decimal(2,0),",
				"          DATE_DIM_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDATEdim",
				"source(output(",
				"          MAXPETLICSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(PET_LICENSE_SK),0) as MaxPetLICSK FROM NYPD2_SCHEMA.PET_LICENSES_FACT',",
				"     format: 'query') ~> sourceFACT",
				"sourcESTG, sourceLocation join(sourcESTG@ZIP_CODE == sourceLocation@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDim",
				"joinLocationDim, sourceBreed join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreeedDim",
				"joinBreeedDim, sourceDATEdim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDatedim",
				"joinDatedim, sourceFACT join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          LOCATION_SK,",
				"          DI_JOB_ID = sourceLocation@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceLocation@DI_LOAD_DT,",
				"          BREED_SK,",
				"          DATE_DIM_SK,",
				"          PET_LICENSE_SK = MAXPETLICSK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(PET_LICENSE_SK = {PET_LICENSE_SK} + RowNum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LICENSE_SK as string,",
				"          ISSUED_DATE_ID as string,",
				"          LOCATION_ID as string,",
				"          BREED_ID as string,",
				"          DT_JOB_ID as string,",
				"          DT_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LICENSE_SK,",
				"          ISSUED_DATE_ID = DI_LOAD_DT,",
				"          LOCATION_ID = LOCATION_SK,",
				"          BREED_ID = BREED_SK,",
				"          DT_JOB_ID = DI_JOB_ID,",
				"          DT_CREATED_DT = DATE_DIM_SK",
				"     )) ~> sink1"
			]
		}
	}
}